load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@aspect_rules_format_npm//:prettier/package_json.bzl", prettier = "bin")
load(":langs.bzl", "LANGS")

bzl_library(
    name = "repositories",
    srcs = ["repositories.bzl"],
    visibility = ["//visibility:public"],
    deps = [
        "@bazel_tools//tools/build_defs/repo:http.bzl",
        "@bazel_tools//tools/build_defs/repo:utils.bzl",
    ],
)

prettier.prettier_binary(
    name = "prettier",
    # Allow the binary to be run outside bazel
    env = {"BAZEL_BINDIR": "."},
)

java_binary(
    name = "java-format",
    jvm_flags = [
        "--add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
    ],
    main_class = "com.google.googlejavaformat.java.Main",
    runtime_deps = ["@google-java-format//jar"],
)

alias(
    name = "black",
    # Don't use the requirements.bzl#entry_point helper as that makes an eager load
    actual = "@aspect_rules_format_pypi_black//:rules_python_wheel_entry_point_black",
)

alias(
    name = "buildifier",
    actual = "@buildifier_prebuilt//:buildifier",
)

alias(
    name = "swiftformat",
    # TODO: keith says it would be okay to upstream a proper toolchain for this
    # https://github.com/bazelbuild/rules_swift/issues/864
    actual = select({
        "@bazel_tools//src/conditions:linux": "@swiftformat",
        "@bazel_tools//src/conditions:darwin": "@swiftformat_mac",
    }),
)

alias(
    name = "buf",
    actual = select({
        "@bazel_tools//src/conditions:linux": "@buf//:bin/buf",
        "@bazel_tools//src/conditions:darwin": "@buf_mac//:bin/buf",
    }),
)

alias(
    name = "terraform",
    actual = select({
        "@bazel_tools//src/conditions:linux": "@terraform_linux_x86_64//:terraform",
        "@bazel_tools//src/conditions:darwin_arm64": "@terraform_macos_aarch64//:terraform",
        "@bazel_tools//src/conditions:darwin_x86_64": "@terraform_macos_x86_64//:terraform",
    }),
)

[
    bool_flag(
        name = s + "_enabled",
        build_setting_default = True,
    )
    for s in LANGS
]

[
    config_setting(
        name = "format_" + s,
        flag_values = {
            s + "_enabled": "1",
        },
    )
    for s in LANGS
]

sh_binary(
    name = "format",
    srcs = ["format.sh"],
    data = [
        ":buildifier",
        ":prettier",
        # We can't make this optional, because it's an eager fetch as soon as this
        # label appears anywhere in this file.
        "@go_sdk//:bin/gofmt",
    ] + select(
        {
            ":format_java": [":java-format"],
            "//conditions:default": [],
        },
    ) + select(
        {
            ":format_swift": [":swiftformat"],
            "//conditions:default": [],
        },
    ) + select(
        {
            ":format_python": [":black"],
            "//conditions:default": [],
        },
    ) + select(
        {
            ":format_proto": [":buf"],
            "//conditions:default": [],
        },
    ) + select(
        {
            ":format_terraform": [":terraform"],
            "//conditions:default": [],
        },
    ),
    visibility = ["//visibility:public"],
    deps = ["@bazel_tools//tools/bash/runfiles"],
)
